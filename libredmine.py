from mechanize import Browser # for browsing
import StringIO
import urlparse
import pdb
import csv     

class RedmineIssue(object):
    '''Represents one issue in Redmine.'''

    def __init__(self, id_or_args, status=None, project=None, tracker=None,
            priority=None, subject=None, assigned_to=None, category=None,
            target_version=None, author=None, start=None, due_date=None,
            percent_done=None, estimated_time=None, created=None, updated=None,
            date_deployed=None, description=None):
        '''Create a new Redmine Issue

        Arguments are in order of the CSV file generated by Redmine.  Can be
        initialized with either these arguments passed as an array, or by
        specifying the arguments individually.
        '''

        if isinstance(id_or_args, list):
            (self.id, self.status, self.project, self.tracker, self.priority,
                    self.subject, self.assigned_to, self.category,
                    self.target_version, self.author, self.start,
                    self.due_date, self.percent_done, self.estimated_time,
                    self.created, self.updated, self.date_deployed,
                    self.description) = id_or_args
        else:
            self.id = id
            self.self = self
            self.status = status
            self.project = project
            self.tracker = tracker
            self.priority = priority
            self.subject = subject
            self.assigned_to = assigned_to
            self.category = category
            self.target_version = target_version
            self.author = author
            self.start = start
            self.due_date = due_date
            self.percent_done = percent_done
            self.estimated_time = estimated_time
            self.created = created
            self.updated = updated
            self.date_deployed = date_deployed
            self.description = description

    def __str__(self):
        return ";\n".join([self.id, self.status, self.project, self.tracker, self.priority,
                    self.subject, self.assigned_to, self.category,
                    self.target_version, self.author, self.start,
                    self.due_date, self.percent_done, self.estimated_time,
                    self.created, self.updated, self.date_deployed,
                    self.description])

    def get_header(self):
        return self.id + ': ' + self.subject + ' (' + self.status + ')'

    def issues_from_csv(csv_list):
        issues = {}
        for row in csv_list:
            if row[0] == "#":
                continue

            red = RedmineIssue(row)
            issues[red.id] = red
        return issues
    issues_from_csv = staticmethod(issues_from_csv)


class Redmine(object):
    '''Represents an instance of Redmine'''
    def __init__(self, url):
        self.url = url
        self.br = Browser()
        self.logged_in = False

    def login(self, user, passwd):
        self.br.open(urlparse.urljoin(self.url, "login"))
        self.br.select_form(nr=1) #Get second form, the first is actually the search.
        self.br["username"] = user
        self.br["password"] = passwd
        response = self.br.submit()  # submit current form
        self.logged_in = True

    def get_issues(self):
        if not self.logged_in:
            return
        self.br.open(urlparse.urljoin(self.url, "issues?assigned_to_id=me&set_filter=1"))
        self.br.open(urlparse.urljoin(self.url, "issues?format=csv"))
        response = self.br.response()
        csv_str = response.read()
        csv_list = csv.reader(StringIO.StringIO(csv_str))
        return RedmineIssue.issues_from_csv(csv_list)

    def get_issue(self, issue_number):
        if not self.logged_in:
            return
        self.br.open(urlparse.urljoin(self.url, "issues/show/" + str(issue_number)))
        pdb.set_trace()
        return False
        



